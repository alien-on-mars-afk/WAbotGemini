[1mdiff --git a/app.py b/app.py[m
[1mindex 72af407..6e932d6 100644[m
[1m--- a/app.py[m
[1m+++ b/app.py[m
[36m@@ -5,7 +5,7 @@[m [mimport os[m
 from dotenv import load_dotenv[m
 import logging[m
 [m
[31m-# Load environment variables[m
[32m+[m
 load_dotenv()[m
 [m
 # Configure logging[m
[36m@@ -13,16 +13,14 @@[m [mlogging.basicConfig(level=logging.INFO)[m
 logger = logging.getLogger(__name__)[m
 [m
 app = Flask(__name__)[m
[31m-CORS(app)  # Enable CORS for all routes[m
[32m+[m[32mCORS(app)[m[41m [m
[32m+[m
 [m
[31m-# Get API key from environment variables[m
 GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")[m
 GEMINI_API_URL = os.getenv("GEMINI_API_URL", "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent")[m
 [m
[31m-# Dictionary to store context for each chat[m
[31m-chat_context = {}[m
 [m
[31m-# Define the owner (your phone number or identifier) who can control chat pausing[m
[32m+[m[32mchat_context = {}[m
 OWNER_ID = '917439228809' [m
 [m
 BLOCKED_KEYWORDS = ["crush", "tuition", "test", "school", "gay", "LGBTQ", "study", "say", "copying" "krishna", "Krishna"][m
[36m@@ -128,9 +126,9 @@[m [mrember user's name like:[m
 "[user]: "what is my name?"[m
 "[Alien]: Your name is [userName]"[m
 [m
[31m-[m
 """[m
 [m
[32m+[m
 @app.route("/", methods=["GET"])[m
 def home():[m
     return "Alien is alive ğŸ›¸", 200[m
[36m@@ -158,25 +156,25 @@[m [mdef webhook():[m
     if sender_number not in chat_context:[m
         chat_context[sender_number] = [][m
 [m
[31m-    # Check if the message contains any blocked keywords[m
[32m+[m[41m   [m
     if any(blocked_word.lower() in user_message.lower() for blocked_word in BLOCKED_KEYWORDS):[m
         # Remove the entire message from the context history if it contains a blocked word[m
         chat_context[sender_number] = [msg for msg in chat_context[sender_number] if user_message.lower() not in msg.lower()][m
         logger.info(f"Blocked message found. Updated context: {chat_context[sender_number]}")[m
     else:[m
[31m-        # Add the message to context history if not blocked[m
[32m+[m
         chat_context[sender_number].append(user_message)[m
 [m
[31m-    # Limit context history to the last 50 messages to avoid overflow[m
[32m+[m
     if len(chat_context[sender_number]) > 8:[m
[31m-        chat_context[sender_number] = chat_context[sender_number][:-6][m
[32m+[m[32m        chat_context[sender_number] = chat_context[sender_number][-4:][m
 [m
     logger.info(f"Current context for {sender_number}: {chat_context[sender_number]}")[m
 [m
[31m-    # Construct structured conversation context for Gemini[m
[32m+[m
     contents = [{"role": "user", "parts": [{"text": instructions.strip()}]}][m
 [m
[31m-    # Alternate between 'user' and 'model' roles[m
[32m+[m
     for i, msg in enumerate(chat_context[sender_number]):[m
         role = "user" if i % 2 == 0 else "model"[m
         contents.append({[m
[36m@@ -184,7 +182,7 @@[m [mdef webhook():[m
             "parts": [{"text": msg}][m
         })[m
 [m
[31m-    # Add the current message as the last user input[m
[32m+[m
     contents.append({[m
         "role": "user",[m
         "parts": [{"text": user_message}][m
